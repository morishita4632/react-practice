{"ast":null,"code":"var _jsxFileName = \"/home/morishita/react/textbook_react/src/index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n/*------------------------- Chap.2 -------------------------*/\n// {}とreturnを省略できるが、可読性が下がる&ステート管理時に結局必要になるので非推奨\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App1 = () => {\n  return (\n    /*#__PURE__*/\n    // returnの中は1要素だけ。複数入れたい場合は外側をdivなどで囲む\n    _jsxDEV(\"div\", {\n      className: \"App1\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"App1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"hoge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"fuga\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 13\n        }, this), \" \", \"fuga2\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"piyo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }, this)\n  );\n}; // フラグメントを利用すれば余計なノードを出力せず複数要素をまとめられる\n\n\n_c = App1;\n\nconst App2 = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      children: \"hoge\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      children: \"fuga\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; // styleはJSのオブジェクトで与える。外側の括弧は「JSを書く」合図。内側はオブジェクト。\n// 中身のオブジェクトだけ別のところで定義するのがよろしい。\n// このfontSizeのようにピュアな数値は自動的にpxがつく。別の単位（%など）の場合は文字列で与える。\n// ただしstyle属性でスタイリングは非推奨で、普通にclassNameとcssでやるべき。\n\n\n_c2 = App2;\n\nconst App3 = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        fontSize: 16,\n        height: \"80%\",\n        color: \"red\"\n      },\n      children: \"hoge\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}; // 入力値がstateで制御されていない\"非制御コンポーネント\"の場合、value属性で指定した文字列をユーザ側で変更できない。defaultValueを使えはOK。チェックボックスなども同様\n\n\n_c3 = App3;\n\nconst App4 = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: \"value\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      defaultValue: \"defaultValue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 54\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }, this), \" checked\", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      defaultChecked: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this), \" defaultChecked\"]\n  }, void 0, true);\n}; // propsは親コンポーネントから子コンポーネントへ渡される属性値のこと\n// まず親は子を呼ぶ際にattributeで値を渡す（name=\"hoge\"）\n// 子はオブジェクトとしてpropsを受け取り、中で利用できる。\n// 今回はnameしか使わないので分割代入も使える。\n\n\n_c4 = App4;\n\nconst App5Chi1 = props => {\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Hello, \", props.name]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 10\n  }, this);\n};\n\n_c5 = App5Chi1;\n\nconst App5Chi2 = ({\n  name\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Hello, \", name]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 10\n  }, this);\n};\n\n_c6 = App5Chi2;\n\nconst App5Par = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(App5Chi1, {\n      name: \"child1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(App5Chi2, {\n      name: \"child2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; // stateを使うにはまず import React, { useState } from 'react'; する。\n\n\n_c7 = App5Par;\n\nconst App6 = () => {\n  _s();\n\n  // コンポーネント内で const [状態変数, 状態変更関数] = useState(初期状態); で定義\n  // 状態変数を更新する際は直接代入ではなく状態変更関数を利用する必要がある\n  // ここのuseStateがReact Hooksの一つである\n  const [liked, setLiked] = useState(false); // イメージ的には liked = !liked だが、これを setLiked(!liked)と書かないといけない\n  // setLikedとレンダリングが紐づいているのかな？\n\n  const toggleLiked = () => setLiked(!liked);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleLiked,\n      children: liked ? \"いいね済\" : \"いいね前\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}; // カウントアプリの練習。\n\n\n_s(App6, \"5oFMLl0KA2P+7Df5hTCAaQ+yYE8=\");\n\n_c8 = App6;\n\nconst App7 = () => {\n  _s2();\n\n  const [count, setCount] = useState(0);\n\n  const addCount = () => setCount(count + 1);\n\n  const subCount = () => setCount(count - 1);\n\n  const resetCount = () => setCount(0);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App7\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: subCount,\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"inline-block\",\n        width: \"30px\",\n        textAlign: \"center\"\n      },\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addCount,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetCount,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n/*------------------------- Chap.3 -------------------------*/\n// 入力値をリアルタイムに表示\n\n\n_s2(App7, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n\n_c9 = App7;\n\nconst App8 = () => {\n  _s3();\n\n  const [name, setName] = useState(\"○○\");\n\n  const handleOnChange = event => setName(event.target.value);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: handleOnChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u3053\\u3093\\u306B\\u3061\\u306F\\u3001\", name, \"\\u3055\\u3093\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}; // カウントアプリ。ただし表示部分を子コンポーネントとする\n\n\n_s3(App8, \"EFlqr40WIbp02Yl1n1C9Mar4zaM=\");\n\n_c10 = App8;\n\nconst App9Chi = props => /*#__PURE__*/_jsxDEV(\"p\", {\n  children: [props.name, \"\\uFF1A\", props.count]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 125,\n  columnNumber: 3\n}, this);\n\n_c11 = App9Chi;\n\nconst App9Par = ({\n  name\n}) => {\n  _s4();\n\n  const [count, setCount] = useState(0);\n\n  const addCount = () => setCount(count + 1);\n\n  const subCount = () => setCount(count - 1);\n\n  const resetCount = () => setCount(0);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(App9Chi, {\n      name: name,\n      count: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: subCount,\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addCount,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetCount,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n/*------------------------- Chap.4 -------------------------*/\n\n/*ログイン・ログアウトボタン。\n  ・if文で表示コンポーネントを切り替える例\n  ・propsで関数を渡す\n  if文は式（値を返すもの）ではないのでJSX内で{}中で直接利用できない。\n  代わりに関数（=式、ここではApp10）の中でifを使えばOK\n  【整理】\n  ・タグの内側でJSを使いたいとき、{}で囲む\n  ・{}内には式（関数実行や変数）が入る。\n*/\n\n\n_s4(App9Par, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n\n_c12 = App9Par;\n\nconst App10Login = ({\n  toggleIsLoggedIn\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: toggleIsLoggedIn,\n    children: \"\\u30ED\\u30B0\\u30A4\\u30F3\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 10\n  }, this);\n};\n\n_c13 = App10Login;\n\nconst App10Logout = ({\n  toggleIsLoggedIn\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: toggleIsLoggedIn,\n    children: \"\\u30ED\\u30B0\\u30A2\\u30A6\\u30C8\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 10\n  }, this);\n};\n\n_c14 = App10Logout;\n\nconst App10 = () => {\n  _s5();\n\n  const [isLoggedIn, setIsLoggedInState] = useState(false);\n\n  const toggleIsLoggedIn = () => {\n    setIsLoggedInState(!isLoggedIn);\n  };\n\n  if (isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(App10Logout, {\n      toggleIsLoggedIn: toggleIsLoggedIn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(App10Login, {\n      toggleIsLoggedIn: toggleIsLoggedIn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 12\n    }, this);\n  }\n}; // 上の例のように関数で囲めばJSX内でifが使える。そこで即時関数で包めば直接ifを使っている感覚で書ける\n// ただし可読性が下がる場合がある\n\n\n_s5(App10, \"6jIVIn/oa2Y2AMsSFQldVD+Eg0A=\");\n\n_c15 = App10;\n\nconst App11 = () => {\n  const isReact = true;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App11\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: (() => {\n        if (isReact) {\n          return \"Hello, React!\";\n        } else {\n          return \"Hello!\";\n        }\n      })()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}; // そこで三項演算子を使えばスマート。元々式なので小細工がいらない\n\n\n_c16 = App11;\n\nconst App12 = () => {\n  const isReact = true;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App12\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: isReact ? \"Hello, React!\" : \"Hello!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n/*条件に応じて表示or非表示、という場合は論理演算子でシンプルに書ける。\n  &&でtrueのときのみ、　||でfalseのときのみ右辺を返す。\n  P28-29を参照。もともと&&, ||は右辺は論理値である必要がない。\n  またJSX内では論理値は表示されないので、true||hoge　で「1」が表示されることはない。\n*/\n\n\n_c17 = App12;\n\nconst App13 = () => {\n  const isReact = true;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App13\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 5\n    }, this), isReact && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Hello, React!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_c18 = App13;\n\nconst App14 = () => {\n  const isReact = true;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App14\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 5\n    }, this), isReact || /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Hello, React!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n/*mapで反復描画\n  反復して生成する要素には一意なkey属性をつけるというルールがある。これはReactの「更新部分だけ再描画する」という性質のため。要素の追加・削除時にkeyがあることで最小限の再描画で済む\n  indexを利用できるが非推奨\n  要素の配列は、単純に要素を並べたものとして描画される\n*/\n\n\n_c19 = App14;\nconst numbers = [2, 4, 6];\n\nconst App15 = () => {\n  const items = numbers.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n    children: item\n  }, item, false, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App15\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: items\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n/*-----------------------------------------------------*/\n// 宣言の都合上最下部にrenderを書いている\n\n\n_c20 = App15;\nReactDOM.render( /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Chap.2\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(App1, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(App2, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(App3, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(App4, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(App5Par, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(App6, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(App7, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Chap.3\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(App8, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n    children: \"App9\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(App9Par, {\n    name: \"hoge\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(App9Par, {\n    name: \"fuga\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Chap.4\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n    children: \"App10\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(App10, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(App11, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(App12, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(App13, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(App14, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(App15, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this)]\n}, void 0, true), document.getElementById('root'));\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20;\n\n$RefreshReg$(_c, \"App1\");\n$RefreshReg$(_c2, \"App2\");\n$RefreshReg$(_c3, \"App3\");\n$RefreshReg$(_c4, \"App4\");\n$RefreshReg$(_c5, \"App5Chi1\");\n$RefreshReg$(_c6, \"App5Chi2\");\n$RefreshReg$(_c7, \"App5Par\");\n$RefreshReg$(_c8, \"App6\");\n$RefreshReg$(_c9, \"App7\");\n$RefreshReg$(_c10, \"App8\");\n$RefreshReg$(_c11, \"App9Chi\");\n$RefreshReg$(_c12, \"App9Par\");\n$RefreshReg$(_c13, \"App10Login\");\n$RefreshReg$(_c14, \"App10Logout\");\n$RefreshReg$(_c15, \"App10\");\n$RefreshReg$(_c16, \"App11\");\n$RefreshReg$(_c17, \"App12\");\n$RefreshReg$(_c18, \"App13\");\n$RefreshReg$(_c19, \"App14\");\n$RefreshReg$(_c20, \"App15\");","map":{"version":3,"sources":["/home/morishita/react/textbook_react/src/index.js"],"names":["React","useState","ReactDOM","App1","App2","App3","fontSize","height","color","App4","App5Chi1","props","name","App5Chi2","App5Par","App6","liked","setLiked","toggleLiked","App7","count","setCount","addCount","subCount","resetCount","display","width","textAlign","App8","setName","handleOnChange","event","target","value","App9Chi","App9Par","App10Login","toggleIsLoggedIn","App10Logout","App10","isLoggedIn","setIsLoggedInState","App11","isReact","App12","App13","App14","numbers","App15","items","map","item","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n/*------------------------- Chap.2 -------------------------*/\n// {}とreturnを省略できるが、可読性が下がる&ステート管理時に結局必要になるので非推奨\nconst App1 = () => {\n  return ( // returnの中は1要素だけ。複数入れたい場合は外側をdivなどで囲む\n    <div className=\"App1\"> {/* classではなくclassNameを用いる */}\n      <h3>App1</h3>\n      <li>hoge</li>\n      <li>\n        fuga<br /> {/* JSXでは空要素の閉じスラッシュが必須 */}\n        fuga2\n      </li>\n      <li>piyo</li>\n    </div>\n  );\n}\n\n// フラグメントを利用すれば余計なノードを出力せず複数要素をまとめられる\nconst App2 = () => {\n  return (\n    <>\n      <h3>App2</h3>\n      <li>hoge</li>\n      <li>fuga</li>\n    </>\n  );\n}\n\n// styleはJSのオブジェクトで与える。外側の括弧は「JSを書く」合図。内側はオブジェクト。\n// 中身のオブジェクトだけ別のところで定義するのがよろしい。\n// このfontSizeのようにピュアな数値は自動的にpxがつく。別の単位（%など）の場合は文字列で与える。\n// ただしstyle属性でスタイリングは非推奨で、普通にclassNameとcssでやるべき。\nconst App3 = () => {\n  return (<>\n    <h3>App3</h3>\n    <h1 style={{ fontSize: 16, height: \"80%\", color: \"red\" }}>hoge</h1>\n  </>);\n}\n\n// 入力値がstateで制御されていない\"非制御コンポーネント\"の場合、value属性で指定した文字列をユーザ側で変更できない。defaultValueを使えはOK。チェックボックスなども同様\nconst App4 = () => {\n  return (<>\n    <h3>App4</h3>\n    <input type=\"text\" value=\"value\" />\n    <input type=\"text\" defaultValue=\"defaultValue\" /><br />\n    <input type=\"checkbox\" checked /> checked\n    <input type=\"checkbox\" defaultChecked /> defaultChecked\n  </>);\n}\n\n// propsは親コンポーネントから子コンポーネントへ渡される属性値のこと\n// まず親は子を呼ぶ際にattributeで値を渡す（name=\"hoge\"）\n// 子はオブジェクトとしてpropsを受け取り、中で利用できる。\n// 今回はnameしか使わないので分割代入も使える。\nconst App5Chi1 = (props) => {\n  return <p>Hello, {props.name}</p>\n}\n\nconst App5Chi2 = ({ name }) => {\n  return <p>Hello, {name}</p>\n}\n\nconst App5Par = () => {\n  return (\n    <>\n      <h3>App5</h3>\n      <App5Chi1 name=\"child1\" />\n      <App5Chi2 name=\"child2\" />\n    </>\n  );\n}\n\n// stateを使うにはまず import React, { useState } from 'react'; する。\nconst App6 = () => {\n  // コンポーネント内で const [状態変数, 状態変更関数] = useState(初期状態); で定義\n  // 状態変数を更新する際は直接代入ではなく状態変更関数を利用する必要がある\n  // ここのuseStateがReact Hooksの一つである\n  const [liked, setLiked] = useState(false);\n\n  // イメージ的には liked = !liked だが、これを setLiked(!liked)と書かないといけない\n  // setLikedとレンダリングが紐づいているのかな？\n  const toggleLiked = () => setLiked(!liked);\n\n  return (<>\n    <h3>App6</h3>\n    <button onClick={toggleLiked}>{liked ? \"いいね済\" : \"いいね前\"}</button>\n  </>);\n}\n\n// カウントアプリの練習。\nconst App7 = () => {\n  const [count, setCount] = useState(0);\n\n  const addCount = () => setCount(count + 1);\n  const subCount = () => setCount(count - 1);\n  const resetCount = () => setCount(0);\n\n  return (<>\n    <h3>App7</h3>\n    <button onClick={subCount}>-</button>\n    <div style={{ display: \"inline-block\", width: \"30px\", textAlign: \"center\" }} >{count}</div>\n    <button onClick={addCount}>+</button>\n    <button onClick={resetCount}>Reset</button>\n  </>);\n}\n\n/*------------------------- Chap.3 -------------------------*/\n// 入力値をリアルタイムに表示\nconst App8 = () => {\n  const [name, setName] = useState(\"○○\");\n\n  const handleOnChange = (event) => setName(event.target.value);\n\n  return (<>\n    <h3>App8</h3>\n    <input type=\"text\" onChange={handleOnChange} />\n    <p>こんにちは、{name}さん</p>\n  </>);\n}\n\n// カウントアプリ。ただし表示部分を子コンポーネントとする\nconst App9Chi = (props) =>\n  <p>{props.name}：{props.count}</p>\n\nconst App9Par = ({ name }) => {\n  const [count, setCount] = useState(0);\n\n  const addCount = () => setCount(count + 1);\n  const subCount = () => setCount(count - 1);\n  const resetCount = () => setCount(0);\n\n  return (<>\n    <App9Chi name={name} count={count} />\n    <button onClick={subCount}>-</button>\n    <button onClick={addCount}>+</button>\n    <button onClick={resetCount}>Reset</button>\n  </>);\n}\n\n/*------------------------- Chap.4 -------------------------*/\n/*ログイン・ログアウトボタン。\n  ・if文で表示コンポーネントを切り替える例\n  ・propsで関数を渡す\n  if文は式（値を返すもの）ではないのでJSX内で{}中で直接利用できない。\n  代わりに関数（=式、ここではApp10）の中でifを使えばOK\n  【整理】\n  ・タグの内側でJSを使いたいとき、{}で囲む\n  ・{}内には式（関数実行や変数）が入る。\n*/\nconst App10Login = ({ toggleIsLoggedIn }) => {\n  return <button onClick={toggleIsLoggedIn}>ログイン</button>\n}\n\nconst App10Logout = ({ toggleIsLoggedIn }) => {\n  return <button onClick={toggleIsLoggedIn}>ログアウト</button>\n}\n\nconst App10 = () => {\n  const [isLoggedIn, setIsLoggedInState] = useState(false);\n  const toggleIsLoggedIn = () => {\n    setIsLoggedInState(!isLoggedIn);\n  }\n  if (isLoggedIn) {\n    return <App10Logout toggleIsLoggedIn={toggleIsLoggedIn} />\n  } else {\n    return <App10Login toggleIsLoggedIn={toggleIsLoggedIn} />\n  }\n}\n\n// 上の例のように関数で囲めばJSX内でifが使える。そこで即時関数で包めば直接ifを使っている感覚で書ける\n// ただし可読性が下がる場合がある\nconst App11 = () => {\n  const isReact = true;\n  return (<>\n    <h3>App11</h3>\n    <p>{(() => {\n      if (isReact) {\n        return \"Hello, React!\";\n      } else {\n        return \"Hello!\";\n      }\n    })()}</p>\n  </>)\n}\n\n// そこで三項演算子を使えばスマート。元々式なので小細工がいらない\nconst App12 = () => {\n  const isReact = true;\n  return (<>\n    <h3>App12</h3>\n    <p>{isReact ? \"Hello, React!\" : \"Hello!\"}</p>\n  </>)\n}\n\n/*条件に応じて表示or非表示、という場合は論理演算子でシンプルに書ける。\n  &&でtrueのときのみ、　||でfalseのときのみ右辺を返す。\n  P28-29を参照。もともと&&, ||は右辺は論理値である必要がない。\n  またJSX内では論理値は表示されないので、true||hoge　で「1」が表示されることはない。\n*/\nconst App13 = () => {\n  const isReact = true;\n  return (<>\n    <h3>App13</h3>\n    {isReact && <p>Hello, React!!</p>}\n  </>)\n}\nconst App14 = () => {\n  const isReact = true;\n  return (<>\n    <h3>App14</h3>\n    {isReact || <p>Hello, React!!</p>}\n  </>)\n}\n\n/*mapで反復描画\n  反復して生成する要素には一意なkey属性をつけるというルールがある。これはReactの「更新部分だけ再描画する」という性質のため。要素の追加・削除時にkeyがあることで最小限の再描画で済む\n  indexを利用できるが非推奨\n  要素の配列は、単純に要素を並べたものとして描画される\n*/\nconst numbers = [2, 4, 6]\n\nconst App15 = () => {\n  const items = numbers.map((item) =>\n    <li key={item}>{item}</li>\n  );\n  return (<>\n    <h3>App15</h3>\n    <ul>{items}</ul>\n  </>)\n}\n\n/*-----------------------------------------------------*/\n// 宣言の都合上最下部にrenderを書いている\nReactDOM.render(\n  <>\n    <h1>Chap.2</h1>\n    <App1 />\n    <App2 />\n    <App3 />\n    <App4 />\n    <App5Par />\n    <App6 />\n    <App7 />\n    <h1>Chap.3</h1>\n    <App8 />\n    <h3>App9</h3>\n    <App9Par name=\"hoge\" />\n    <App9Par name=\"fuga\" />\n    <h1>Chap.4</h1>\n    <h3>App10</h3>\n    <App10 />\n    <App11 />\n    <App12 />\n    <App13 />\n    <App14 />\n    <App15 />\n  </>\n  ,\n  document.getElementById('root')\n);"]},"metadata":{},"sourceType":"module"}