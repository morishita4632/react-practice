{"ast":null,"code":"var _jsxFileName = \"/home/morishita/react/textbook_react/src/index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$(),\n    _s11 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n/*------------------------- Chap.2 -------------------------*/\n// {}とreturnを省略できるが、可読性が下がる&ステート管理時に結局必要になるので非推奨\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App1 = () => {\n  return (\n    /*#__PURE__*/\n    // returnの中は1要素だけ。複数入れたい場合は外側をdivなどで囲む\n    _jsxDEV(\"div\", {\n      className: \"App1\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"App1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"hoge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"fuga\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 13\n        }, this), \" \", \"fuga2\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"piyo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }, this)\n  );\n}; // フラグメントを利用すれば余計なノードを出力せず複数要素をまとめられる\n\n\n_c = App1;\n\nconst App2 = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      children: \"hoge\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      children: \"fuga\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; // styleはJSのオブジェクトで与える。外側の括弧は「JSを書く」合図。内側はオブジェクト。\n// 中身のオブジェクトだけ別のところで定義するのがよろしい。\n// このfontSizeのようにピュアな数値は自動的にpxがつく。別の単位（%など）の場合は文字列で与える。\n// ただしstyle属性でスタイリングは非推奨で、普通にclassNameとcssでやるべき。\n\n\n_c2 = App2;\n\nconst App3 = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        fontSize: 16,\n        height: \"80%\",\n        color: \"red\"\n      },\n      children: \"hoge\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}; // 入力値がstateで制御されていない\"非制御コンポーネント\"の場合、value属性で指定した文字列をユーザ側で変更できない。defaultValueを使えはOK。チェックボックスなども同様\n\n\n_c3 = App3;\n\nconst App4 = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: \"value\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      defaultValue: \"defaultValue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 54\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }, this), \" checked\", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      defaultChecked: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this), \" defaultChecked\"]\n  }, void 0, true);\n}; // propsは親コンポーネントから子コンポーネントへ渡される属性値のこと\n// まず親は子を呼ぶ際にattributeで値を渡す（name=\"hoge\"）\n// 子はオブジェクトとしてpropsを受け取り、中で利用できる。\n// 今回はnameしか使わないので分割代入も使える。\n\n\n_c4 = App4;\n\nconst App5Chi1 = props => {\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Hello, \", props.name]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 10\n  }, this);\n};\n\n_c5 = App5Chi1;\n\nconst App5Chi2 = ({\n  name\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Hello, \", name]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 10\n  }, this);\n};\n\n_c6 = App5Chi2;\n\nconst App5Par = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(App5Chi1, {\n      name: \"child1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(App5Chi2, {\n      name: \"child2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; // stateを使うにはまず import React, { useState } from 'react'; する。\n\n\n_c7 = App5Par;\n\nconst App6 = () => {\n  _s();\n\n  // コンポーネント内で const [状態変数, 状態変更関数] = useState(初期状態); で定義\n  // 状態変数を更新する際は直接代入ではなく状態変更関数を利用する必要がある\n  // ここのuseStateがReact Hooksの一つである\n  const [liked, setLiked] = useState(false); // イメージ的には liked = !liked だが、これを setLiked(!liked)と書かないといけない\n  // setLikedとレンダリングが紐づいているのかな？\n\n  const toggleLiked = () => setLiked(!liked);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleLiked,\n      children: liked ? \"いいね済\" : \"いいね前\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}; // カウントアプリの練習。\n\n\n_s(App6, \"5oFMLl0KA2P+7Df5hTCAaQ+yYE8=\");\n\n_c8 = App6;\n\nconst App7 = () => {\n  _s2();\n\n  const [count, setCount] = useState(0);\n\n  const addCount = () => setCount(count + 1);\n\n  const subCount = () => setCount(count - 1);\n\n  const resetCount = () => setCount(0);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App7\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: subCount,\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"inline-block\",\n        width: \"30px\",\n        textAlign: \"center\"\n      },\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addCount,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetCount,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n/*------------------------- Chap.3 -------------------------*/\n// 入力値をリアルタイムに表示\n\n\n_s2(App7, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n\n_c9 = App7;\n\nconst App8 = () => {\n  _s3();\n\n  const [name, setName] = useState(\"○○\");\n\n  const handleOnChange = event => setName(event.target.value);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: handleOnChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u3053\\u3093\\u306B\\u3061\\u306F\\u3001\", name, \"\\u3055\\u3093\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}; // カウントアプリ。ただし表示部分を子コンポーネントとする\n\n\n_s3(App8, \"EFlqr40WIbp02Yl1n1C9Mar4zaM=\");\n\n_c10 = App8;\n\nconst App9Chi = props => /*#__PURE__*/_jsxDEV(\"p\", {\n  children: [props.name, \"\\uFF1A\", props.count]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 125,\n  columnNumber: 3\n}, this);\n\n_c11 = App9Chi;\n\nconst App9Par = ({\n  name\n}) => {\n  _s4();\n\n  const [count, setCount] = useState(0);\n\n  const addCount = () => setCount(count + 1);\n\n  const subCount = () => setCount(count - 1);\n\n  const resetCount = () => setCount(0);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(App9Chi, {\n      name: name,\n      count: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: subCount,\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addCount,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetCount,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n/*------------------------- Chap.4 -------------------------*/\n\n/*ログイン・ログアウトボタン。\n  ・if文で表示コンポーネントを切り替える例\n  ・propsで関数を渡す\n  if文は式（値を返すもの）ではないのでJSX内で{}中で直接利用できない。\n  代わりに関数（=式、ここではApp10）の中でifを使えばOK\n  【整理】\n  ・タグの内側でJSを使いたいとき、{}で囲む\n  ・{}内には式（関数実行や変数）が入る。\n*/\n\n\n_s4(App9Par, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n\n_c12 = App9Par;\n\nconst App10Login = ({\n  toggleIsLoggedIn\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: toggleIsLoggedIn,\n    children: \"\\u30ED\\u30B0\\u30A4\\u30F3\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 10\n  }, this);\n};\n\n_c13 = App10Login;\n\nconst App10Logout = ({\n  toggleIsLoggedIn\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: toggleIsLoggedIn,\n    children: \"\\u30ED\\u30B0\\u30A2\\u30A6\\u30C8\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 10\n  }, this);\n};\n\n_c14 = App10Logout;\n\nconst App10 = () => {\n  _s5();\n\n  const [isLoggedIn, setIsLoggedInState] = useState(false);\n\n  const toggleIsLoggedIn = () => {\n    setIsLoggedInState(!isLoggedIn);\n  };\n\n  if (isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(App10Logout, {\n      toggleIsLoggedIn: toggleIsLoggedIn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(App10Login, {\n      toggleIsLoggedIn: toggleIsLoggedIn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 12\n    }, this);\n  }\n}; // 上の例のように関数で囲めばJSX内でifが使える。そこで即時関数で包めば直接ifを使っている感覚で書ける\n// ただし可読性が下がる場合がある\n\n\n_s5(App10, \"6jIVIn/oa2Y2AMsSFQldVD+Eg0A=\");\n\n_c15 = App10;\n\nconst App11 = () => {\n  const isReact = true;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App11\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: (() => {\n        if (isReact) {\n          return \"Hello, React!\";\n        } else {\n          return \"Hello!\";\n        }\n      })()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}; // そこで三項演算子を使えばスマート。元々式なので小細工がいらない\n\n\n_c16 = App11;\n\nconst App12 = () => {\n  const isReact = true;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App12\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: isReact ? \"Hello, React!\" : \"Hello!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n/*条件に応じて表示or非表示、という場合は論理演算子でシンプルに書ける。\n  &&でtrueのときのみ、　||でfalseのときのみ右辺を返す。\n  P28-29を参照。もともと&&, ||は右辺は論理値である必要がない。\n  またJSX内では論理値は表示されないので、true||hoge　で「1」が表示されることはない。\n*/\n\n\n_c17 = App12;\n\nconst App13 = () => {\n  const isReact = true;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App13\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 5\n    }, this), isReact && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Hello, React!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_c18 = App13;\n\nconst App14 = () => {\n  const isReact = true;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App14\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 5\n    }, this), isReact || /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Hello, React!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n/*mapで反復描画\n  反復して生成する要素には一意なkey属性をつけるというルールがある。これはReactの「更新部分だけ再描画する」という性質のため。要素の追加・削除時にkeyがあることで最小限の再描画で済む。\n  したがってindexを利用することはできるが非推奨。\n  https://zenn.dev/luvmini511/articles/f7b22d93e9c182\n\n  要素の配列は、単純に要素を並べたものとして描画される。\n*/\n\n\n_c19 = App14;\nconst numbers = [2, 4, 6];\n\nconst App15 = () => {\n  const items = numbers.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n    children: item\n  }, item, false, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App15\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: items\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}; // イベント処理。イベントオブジェクトを受け取ることができる。\n\n\n_c20 = App15;\n\nconst handleChange = e => {\n  console.log(e.target.value);\n};\n\nconst App16 = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App16\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      defaultValue: \"\",\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}; // 入力フォーム & ボタンクリックで入力内容を反映\n\n\n_c21 = App16;\n\nconst App17 = () => {\n  _s6();\n\n  // 入力中テキスト\n  const [inputText, setInputText] = useState(\"\"); // 表示テキスト\n\n  const [text, setText] = useState(\"React\"); // 入力イベント\n\n  const handleChange = e => setInputText(e.target.value); // ボタンイベント\n\n\n  const handleClick = () => {\n    setText(inputText);\n    setInputText(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App17\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"I love \", text, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inputText,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      value: \"\\u5165\\u529B\",\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}; // セレクトボックス & 内容をリアルタイムで反映\n// option内のvalue属性がe.target.valueに送られる\n\n\n_s6(App17, \"so6d2l9FEmV2209hJ9zDxyCTcGo=\");\n\n_c22 = App17;\n\nconst App18 = () => {\n  _s7();\n\n  const [selectedValue, setSelectedValue] = useState(\"HTML\");\n\n  const handleChange = e => {\n    setSelectedValue(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App18\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u73FE\\u5728\\u5024\\uFF1A\", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: selectedValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedValue,\n      onChange: handleChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"HTML\",\n        children: \"HTML\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"CSS\",\n        children: \"CSS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"JS\",\n        children: \"JS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}; // 上のセレクトボックスをmapでリファクタリング\n// valuesの段階でidまでつけておくことで、mapのkey属性に利用できる。\n\n\n_s7(App18, \"rCT2yg+V71tvZc+hk0ovo1dw/JM=\");\n\n_c23 = App18;\nconst values19 = [{\n  id: 1,\n  item: \"HTML\"\n}, {\n  id: 2,\n  item: \"CSS\"\n}, {\n  id: 3,\n  item: \"JS\"\n}];\n\nconst App19 = () => {\n  _s8();\n\n  const [selectedValue, setSelectedValue] = useState(values19[0].item);\n\n  const handleChange = e => {\n    setSelectedValue(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App19\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedValue,\n      onChange: handleChange,\n      children: values19.map(value => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: value.item,\n        children: value.item\n      }, value.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 20\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n/*  ラジオボタン\n    labelタグ内にinputと生テキストを入れることで、それらを紐づけられる\n    するとテキスト部をクリックしてもinputをクリックしたことになり、操作性が増す\n*/\n\n\n_s8(App19, \"EkutxW8E8AOuAd3Py/Bz1DL6N1o=\");\n\n_c24 = App19;\nconst values20 = [{\n  id: 1,\n  color: \"赤\"\n}, {\n  id: 2,\n  color: \"青\"\n}, {\n  id: 3,\n  color: \"黄\"\n}];\n\nconst App20Item = props => /*#__PURE__*/_jsxDEV(\"label\", {\n  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"radio\",\n    value: props.value,\n    checked: props.checked,\n    onChange: props.onChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 316,\n    columnNumber: 5\n  }, this), props.value]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 315,\n  columnNumber: 3\n}, this);\n\n_c25 = App20Item;\n\nconst App20 = () => {\n  _s9();\n\n  const [selectedValue, setSelectedValue] = useState(values20[0].color);\n\n  const handleChange = e => {\n    setSelectedValue(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App20\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u73FE\\u5728\\u5024\\uFF1A\", selectedValue]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 5\n    }, this), values20.map(elem => /*#__PURE__*/_jsxDEV(App20Item, {\n      value: elem.color,\n      checked: elem.color === selectedValue,\n      onChange: handleChange\n    }, elem.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this))]\n  }, void 0, true);\n};\n/*  チェックボックス\n    「現在の値」が複数になり得るので配列orオブジェクトで管理する。\n    今回は配列で。\n    ※ map内のkeyを忘れずに\n*/\n\n\n_s9(App20, \"RBScmsp0qjhqARbpMOJY/lh7Zp0=\");\n\n_c26 = App20;\nconst values21 = [{\n  id: 1,\n  item: \"マウス\"\n}, {\n  id: 2,\n  item: \"モニター\"\n}, {\n  id: 3,\n  item: \"キーボード\"\n}];\n\nconst App21Item = props => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: /*#__PURE__*/_jsxDEV(\"label\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      value: props.value,\n      checked: props.checked,\n      onChange: props.onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 5\n    }, this), props.value]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 351,\n    columnNumber: 3\n  }, this)\n}, void 0, false);\n\n_c27 = App21Item;\n\nconst App21 = () => {\n  _s10();\n\n  const [checkedValues, setCheckedValues] = useState([]);\n\n  const handleChange = e => {\n    const val = e.target.value;\n    if (checkedValues.includes(val)) setCheckedValues(checkedValues.filter(item => item !== val));else setCheckedValues([...checkedValues, val]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App20\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u73FE\\u5728\\u5024\\uFF1A\", checkedValues.join(\", \")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 5\n    }, this), values21.map(elem => /*#__PURE__*/_jsxDEV(App21Item, {\n      value: elem.item,\n      checked: checkedValues.includes(elem.item),\n      onChange: handleChange\n    }, elem.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }, this))]\n  }, void 0, true);\n}; // 同じものをオブジェクト管理で作る\n\n\n_s10(App21, \"geHvoYp3wxF3iD9Y8AQ1dMG1Yfc=\");\n\n_c28 = App21;\n\nconst App22Item = props => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: /*#__PURE__*/_jsxDEV(\"label\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      value: props.value,\n      checked: props.checked,\n      onChange: props.onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 5\n    }, this), props.value]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 387,\n    columnNumber: 3\n  }, this)\n}, void 0, false);\n\n_c29 = App22Item;\n\nconst App22 = () => {\n  _s11();\n\n  const [checkedValues, setCheckedValues] = useState({});\n\n  const handleChange = e => {\n    const val = e.target.value;\n\n    if (checkedValues[val]) {\n      checkedValues[val] = false;\n      setCheckedValues(checkedValues);\n    } else {\n      checkedValues[val] = true;\n      setCheckedValues([...checkedValues, val]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"App20\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u73FE\\u5728\\u5024\\uFF1A\", Object.keys(checkedValues).join(\", \")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 5\n    }, this), values21.map(elem => /*#__PURE__*/_jsxDEV(App22Item, {\n      value: elem.item,\n      checked: checkedValues.includes(elem.item),\n      onChange: handleChange\n    }, elem.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 7\n    }, this))]\n  }, void 0, true);\n};\n/*=====================================================*/\n// 宣言の都合上最下部にrenderを書いている\n\n\n_s11(App22, \"UWlI4tKx+M8WU3FM1sCYOW8kpPw=\");\n\n_c30 = App22;\nReactDOM.render( /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Chap.2\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 429,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(App1, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 430,\n    columnNumber: 5\n  }, this), \"    \", /*#__PURE__*/_jsxDEV(App2, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 430,\n    columnNumber: 17\n  }, this), \"    \", /*#__PURE__*/_jsxDEV(App3, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 430,\n    columnNumber: 29\n  }, this), \"    \", /*#__PURE__*/_jsxDEV(App4, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 430,\n    columnNumber: 41\n  }, this), /*#__PURE__*/_jsxDEV(App5Par, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 431,\n    columnNumber: 5\n  }, this), \"    \", /*#__PURE__*/_jsxDEV(App6, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 431,\n    columnNumber: 20\n  }, this), \"    \", /*#__PURE__*/_jsxDEV(App7, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 431,\n    columnNumber: 32\n  }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Chap.3\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 432,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(App8, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 433,\n    columnNumber: 5\n  }, this), \"    \", /*#__PURE__*/_jsxDEV(\"h3\", {\n    children: \"App9\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 433,\n    columnNumber: 17\n  }, this), /*#__PURE__*/_jsxDEV(App9Par, {\n    name: \"hoge\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 434,\n    columnNumber: 5\n  }, this), \"    \", /*#__PURE__*/_jsxDEV(App9Par, {\n    name: \"fuga\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 434,\n    columnNumber: 32\n  }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Chap.4\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 435,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n    children: \"App10\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 436,\n    columnNumber: 5\n  }, this), \"    \", /*#__PURE__*/_jsxDEV(App10, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 436,\n    columnNumber: 23\n  }, this), \"    \", /*#__PURE__*/_jsxDEV(App11, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 436,\n    columnNumber: 36\n  }, this), \"    \", /*#__PURE__*/_jsxDEV(App12, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 436,\n    columnNumber: 49\n  }, this), /*#__PURE__*/_jsxDEV(App13, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 437,\n    columnNumber: 5\n  }, this), \"   \", /*#__PURE__*/_jsxDEV(App14, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 437,\n    columnNumber: 17\n  }, this), \"    \", /*#__PURE__*/_jsxDEV(App15, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 437,\n    columnNumber: 30\n  }, this), \"    \", /*#__PURE__*/_jsxDEV(App16, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 437,\n    columnNumber: 43\n  }, this), /*#__PURE__*/_jsxDEV(App17, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 438,\n    columnNumber: 5\n  }, this), \"   \", /*#__PURE__*/_jsxDEV(App18, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 438,\n    columnNumber: 17\n  }, this), \"   \", /*#__PURE__*/_jsxDEV(App19, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 438,\n    columnNumber: 29\n  }, this), \"  \", /*#__PURE__*/_jsxDEV(App20, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 438,\n    columnNumber: 40\n  }, this), \"  \", /*#__PURE__*/_jsxDEV(App21, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 438,\n    columnNumber: 51\n  }, this)]\n}, void 0, true), document.getElementById('root'));\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27, _c28, _c29, _c30;\n\n$RefreshReg$(_c, \"App1\");\n$RefreshReg$(_c2, \"App2\");\n$RefreshReg$(_c3, \"App3\");\n$RefreshReg$(_c4, \"App4\");\n$RefreshReg$(_c5, \"App5Chi1\");\n$RefreshReg$(_c6, \"App5Chi2\");\n$RefreshReg$(_c7, \"App5Par\");\n$RefreshReg$(_c8, \"App6\");\n$RefreshReg$(_c9, \"App7\");\n$RefreshReg$(_c10, \"App8\");\n$RefreshReg$(_c11, \"App9Chi\");\n$RefreshReg$(_c12, \"App9Par\");\n$RefreshReg$(_c13, \"App10Login\");\n$RefreshReg$(_c14, \"App10Logout\");\n$RefreshReg$(_c15, \"App10\");\n$RefreshReg$(_c16, \"App11\");\n$RefreshReg$(_c17, \"App12\");\n$RefreshReg$(_c18, \"App13\");\n$RefreshReg$(_c19, \"App14\");\n$RefreshReg$(_c20, \"App15\");\n$RefreshReg$(_c21, \"App16\");\n$RefreshReg$(_c22, \"App17\");\n$RefreshReg$(_c23, \"App18\");\n$RefreshReg$(_c24, \"App19\");\n$RefreshReg$(_c25, \"App20Item\");\n$RefreshReg$(_c26, \"App20\");\n$RefreshReg$(_c27, \"App21Item\");\n$RefreshReg$(_c28, \"App21\");\n$RefreshReg$(_c29, \"App22Item\");\n$RefreshReg$(_c30, \"App22\");","map":{"version":3,"sources":["/home/morishita/react/textbook_react/src/index.js"],"names":["React","useState","ReactDOM","App1","App2","App3","fontSize","height","color","App4","App5Chi1","props","name","App5Chi2","App5Par","App6","liked","setLiked","toggleLiked","App7","count","setCount","addCount","subCount","resetCount","display","width","textAlign","App8","setName","handleOnChange","event","target","value","App9Chi","App9Par","App10Login","toggleIsLoggedIn","App10Logout","App10","isLoggedIn","setIsLoggedInState","App11","isReact","App12","App13","App14","numbers","App15","items","map","item","handleChange","e","console","log","App16","App17","inputText","setInputText","text","setText","handleClick","App18","selectedValue","setSelectedValue","values19","id","App19","values20","App20Item","checked","onChange","App20","elem","values21","App21Item","App21","checkedValues","setCheckedValues","val","includes","filter","join","App22Item","App22","Object","keys","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n/*------------------------- Chap.2 -------------------------*/\n// {}とreturnを省略できるが、可読性が下がる&ステート管理時に結局必要になるので非推奨\nconst App1 = () => {\n  return ( // returnの中は1要素だけ。複数入れたい場合は外側をdivなどで囲む\n    <div className=\"App1\"> {/* classではなくclassNameを用いる */}\n      <h3>App1</h3>\n      <li>hoge</li>\n      <li>\n        fuga<br /> {/* JSXでは空要素の閉じスラッシュが必須 */}\n        fuga2\n      </li>\n      <li>piyo</li>\n    </div>\n  );\n}\n\n// フラグメントを利用すれば余計なノードを出力せず複数要素をまとめられる\nconst App2 = () => {\n  return (\n    <>\n      <h3>App2</h3>\n      <li>hoge</li>\n      <li>fuga</li>\n    </>\n  );\n}\n\n// styleはJSのオブジェクトで与える。外側の括弧は「JSを書く」合図。内側はオブジェクト。\n// 中身のオブジェクトだけ別のところで定義するのがよろしい。\n// このfontSizeのようにピュアな数値は自動的にpxがつく。別の単位（%など）の場合は文字列で与える。\n// ただしstyle属性でスタイリングは非推奨で、普通にclassNameとcssでやるべき。\nconst App3 = () => {\n  return (<>\n    <h3>App3</h3>\n    <h1 style={{ fontSize: 16, height: \"80%\", color: \"red\" }}>hoge</h1>\n  </>);\n}\n\n// 入力値がstateで制御されていない\"非制御コンポーネント\"の場合、value属性で指定した文字列をユーザ側で変更できない。defaultValueを使えはOK。チェックボックスなども同様\nconst App4 = () => {\n  return (<>\n    <h3>App4</h3>\n    <input type=\"text\" value=\"value\" />\n    <input type=\"text\" defaultValue=\"defaultValue\" /><br />\n    <input type=\"checkbox\" checked /> checked\n    <input type=\"checkbox\" defaultChecked /> defaultChecked\n  </>);\n}\n\n// propsは親コンポーネントから子コンポーネントへ渡される属性値のこと\n// まず親は子を呼ぶ際にattributeで値を渡す（name=\"hoge\"）\n// 子はオブジェクトとしてpropsを受け取り、中で利用できる。\n// 今回はnameしか使わないので分割代入も使える。\nconst App5Chi1 = (props) => {\n  return <p>Hello, {props.name}</p>\n}\n\nconst App5Chi2 = ({ name }) => {\n  return <p>Hello, {name}</p>\n}\n\nconst App5Par = () => {\n  return (\n    <>\n      <h3>App5</h3>\n      <App5Chi1 name=\"child1\" />\n      <App5Chi2 name=\"child2\" />\n    </>\n  );\n}\n\n// stateを使うにはまず import React, { useState } from 'react'; する。\nconst App6 = () => {\n  // コンポーネント内で const [状態変数, 状態変更関数] = useState(初期状態); で定義\n  // 状態変数を更新する際は直接代入ではなく状態変更関数を利用する必要がある\n  // ここのuseStateがReact Hooksの一つである\n  const [liked, setLiked] = useState(false);\n\n  // イメージ的には liked = !liked だが、これを setLiked(!liked)と書かないといけない\n  // setLikedとレンダリングが紐づいているのかな？\n  const toggleLiked = () => setLiked(!liked);\n\n  return (<>\n    <h3>App6</h3>\n    <button onClick={toggleLiked}>{liked ? \"いいね済\" : \"いいね前\"}</button>\n  </>);\n}\n\n// カウントアプリの練習。\nconst App7 = () => {\n  const [count, setCount] = useState(0);\n\n  const addCount = () => setCount(count + 1);\n  const subCount = () => setCount(count - 1);\n  const resetCount = () => setCount(0);\n\n  return (<>\n    <h3>App7</h3>\n    <button onClick={subCount}>-</button>\n    <div style={{ display: \"inline-block\", width: \"30px\", textAlign: \"center\" }} >{count}</div>\n    <button onClick={addCount}>+</button>\n    <button onClick={resetCount}>Reset</button>\n  </>);\n}\n\n/*------------------------- Chap.3 -------------------------*/\n// 入力値をリアルタイムに表示\nconst App8 = () => {\n  const [name, setName] = useState(\"○○\");\n\n  const handleOnChange = (event) => setName(event.target.value);\n\n  return (<>\n    <h3>App8</h3>\n    <input type=\"text\" onChange={handleOnChange} />\n    <p>こんにちは、{name}さん</p>\n  </>);\n}\n\n// カウントアプリ。ただし表示部分を子コンポーネントとする\nconst App9Chi = (props) =>\n  <p>{props.name}：{props.count}</p>\n\nconst App9Par = ({ name }) => {\n  const [count, setCount] = useState(0);\n\n  const addCount = () => setCount(count + 1);\n  const subCount = () => setCount(count - 1);\n  const resetCount = () => setCount(0);\n\n  return (<>\n    <App9Chi name={name} count={count} />\n    <button onClick={subCount}>-</button>\n    <button onClick={addCount}>+</button>\n    <button onClick={resetCount}>Reset</button>\n  </>);\n}\n\n/*------------------------- Chap.4 -------------------------*/\n/*ログイン・ログアウトボタン。\n  ・if文で表示コンポーネントを切り替える例\n  ・propsで関数を渡す\n  if文は式（値を返すもの）ではないのでJSX内で{}中で直接利用できない。\n  代わりに関数（=式、ここではApp10）の中でifを使えばOK\n  【整理】\n  ・タグの内側でJSを使いたいとき、{}で囲む\n  ・{}内には式（関数実行や変数）が入る。\n*/\nconst App10Login = ({ toggleIsLoggedIn }) => {\n  return <button onClick={toggleIsLoggedIn}>ログイン</button>\n}\n\nconst App10Logout = ({ toggleIsLoggedIn }) => {\n  return <button onClick={toggleIsLoggedIn}>ログアウト</button>\n}\n\nconst App10 = () => {\n  const [isLoggedIn, setIsLoggedInState] = useState(false);\n  const toggleIsLoggedIn = () => {\n    setIsLoggedInState(!isLoggedIn);\n  }\n  if (isLoggedIn) {\n    return <App10Logout toggleIsLoggedIn={toggleIsLoggedIn} />\n  } else {\n    return <App10Login toggleIsLoggedIn={toggleIsLoggedIn} />\n  }\n}\n\n// 上の例のように関数で囲めばJSX内でifが使える。そこで即時関数で包めば直接ifを使っている感覚で書ける\n// ただし可読性が下がる場合がある\nconst App11 = () => {\n  const isReact = true;\n  return (<>\n    <h3>App11</h3>\n    <p>{(() => {\n      if (isReact) {\n        return \"Hello, React!\";\n      } else {\n        return \"Hello!\";\n      }\n    })()}</p>\n  </>)\n}\n\n// そこで三項演算子を使えばスマート。元々式なので小細工がいらない\nconst App12 = () => {\n  const isReact = true;\n  return (<>\n    <h3>App12</h3>\n    <p>{isReact ? \"Hello, React!\" : \"Hello!\"}</p>\n  </>)\n}\n\n/*条件に応じて表示or非表示、という場合は論理演算子でシンプルに書ける。\n  &&でtrueのときのみ、　||でfalseのときのみ右辺を返す。\n  P28-29を参照。もともと&&, ||は右辺は論理値である必要がない。\n  またJSX内では論理値は表示されないので、true||hoge　で「1」が表示されることはない。\n*/\nconst App13 = () => {\n  const isReact = true;\n  return (<>\n    <h3>App13</h3>\n    {isReact && <p>Hello, React!!</p>}\n  </>)\n}\nconst App14 = () => {\n  const isReact = true;\n  return (<>\n    <h3>App14</h3>\n    {isReact || <p>Hello, React!!</p>}\n  </>)\n}\n\n/*mapで反復描画\n  反復して生成する要素には一意なkey属性をつけるというルールがある。これはReactの「更新部分だけ再描画する」という性質のため。要素の追加・削除時にkeyがあることで最小限の再描画で済む。\n  したがってindexを利用することはできるが非推奨。\n  https://zenn.dev/luvmini511/articles/f7b22d93e9c182\n\n  要素の配列は、単純に要素を並べたものとして描画される。\n*/\nconst numbers = [2, 4, 6]\n\nconst App15 = () => {\n  const items = numbers.map((item) =>\n    <li key={item}>{item}</li>\n  );\n  return (<>\n    <h3>App15</h3>\n    <ul>{items}</ul>\n  </>)\n}\n\n// イベント処理。イベントオブジェクトを受け取ることができる。\nconst handleChange = (e) => {\n  console.log(e.target.value);\n}\nconst App16 = () => {\n  return <>\n    <h3>App16</h3>\n    <input type=\"text\" defaultValue=\"\" onChange={handleChange} />\n  </>;\n}\n\n// 入力フォーム & ボタンクリックで入力内容を反映\nconst App17 = () => {\n  // 入力中テキスト\n  const [inputText, setInputText] = useState(\"\");\n  // 表示テキスト\n  const [text, setText] = useState(\"React\");\n\n  // 入力イベント\n  const handleChange = (e) => setInputText(e.target.value);\n  // ボタンイベント\n  const handleClick = () => {\n    setText(inputText);\n    setInputText(\"\");\n  }\n\n  return (<>\n    <h3>App17</h3>\n    <p>I love {text}!</p>\n    <input type=\"text\" value={inputText} onChange={handleChange} />\n    <input type=\"button\" value=\"入力\" onClick={handleClick} />\n  </>)\n}\n\n// セレクトボックス & 内容をリアルタイムで反映\n// option内のvalue属性がe.target.valueに送られる\nconst App18 = () => {\n  const [selectedValue, setSelectedValue] = useState(\"HTML\");\n  const handleChange = (e) => {\n    setSelectedValue(e.target.value);\n  }\n  return (<>\n    <h3>App18</h3>\n    <p>現在値：<b>{selectedValue}</b></p>\n    <select value={selectedValue} onChange={handleChange}>\n      <option value=\"HTML\">HTML</option>\n      <option value=\"CSS\">CSS</option>\n      <option value=\"JS\">JS</option>\n    </select>\n  </>)\n}\n\n// 上のセレクトボックスをmapでリファクタリング\n// valuesの段階でidまでつけておくことで、mapのkey属性に利用できる。\nconst values19 =\n  [{ id: 1, item: \"HTML\" }, { id: 2, item: \"CSS\" }, { id: 3, item: \"JS\" }];\n\nconst App19 = () => {\n  const [selectedValue, setSelectedValue] = useState(values19[0].item);\n  const handleChange = (e) => {\n    setSelectedValue(e.target.value);\n  }\n  return (<>\n    <h3>App19</h3>\n    <select value={selectedValue} onChange={handleChange}>\n      {values19.map(\n        (value) => <option value={value.item} key={value.id} >{value.item}</option>\n      )}\n    </select>\n  </>)\n}\n\n/*  ラジオボタン\n    labelタグ内にinputと生テキストを入れることで、それらを紐づけられる\n    するとテキスト部をクリックしてもinputをクリックしたことになり、操作性が増す\n*/\nconst values20 = [{ id: 1, color: \"赤\" }, { id: 2, color: \"青\" }, { id: 3, color: \"黄\" }];\n\nconst App20Item = (props) =>\n  <label>\n    <input\n      type=\"radio\" value={props.value}\n      checked={props.checked}\n      onChange={props.onChange} />\n    {props.value}\n  </label>\n\nconst App20 = () => {\n  const [selectedValue, setSelectedValue] = useState(values20[0].color);\n  const handleChange = (e) => {\n    setSelectedValue(e.target.value);\n  }\n  return (<>\n    <h3>App20</h3>\n    <p>現在値：{selectedValue}</p>\n    {values20.map((elem) =>\n      <App20Item\n        key={elem.id}\n        value={elem.color}\n        checked={elem.color === selectedValue}\n        onChange={handleChange}\n      />\n    )}\n  </>)\n}\n\n\n/*  チェックボックス\n    「現在の値」が複数になり得るので配列orオブジェクトで管理する。\n    今回は配列で。\n    ※ map内のkeyを忘れずに\n*/\nconst values21 = [{ id: 1, item: \"マウス\" }, { id: 2, item: \"モニター\" }, { id: 3, item: \"キーボード\" }];\n\nconst App21Item = (props) => <>\n  <label>\n    <input\n      type=\"checkbox\"\n      value={props.value}\n      checked={props.checked}\n      onChange={props.onChange}\n    />\n    {props.value}\n  </label>\n</>\n\nconst App21 = () => {\n  const [checkedValues, setCheckedValues] = useState([]);\n  const handleChange = (e) => {\n    const val = e.target.value;\n    if (checkedValues.includes(val))\n      setCheckedValues(checkedValues.filter((item) => item !== val));\n    else\n      setCheckedValues([...checkedValues, val]);\n  }\n  return (<>\n    <h3>App20</h3>\n    <p>現在値：{checkedValues.join(\", \")}</p>\n    {values21.map((elem) =>\n      <App21Item\n        key={elem.id}\n        value={elem.item}\n        checked={checkedValues.includes(elem.item)}\n        onChange={handleChange}\n      />\n    )}\n  </>);\n}\n\n// 同じものをオブジェクト管理で作る\nconst App22Item = (props) => <>\n  <label>\n    <input\n      type=\"checkbox\"\n      value={props.value}\n      checked={props.checked}\n      onChange={props.onChange}\n    />\n    {props.value}\n  </label>\n</>\n\nconst App22 = () => {\n  const [checkedValues, setCheckedValues] = useState({});\n  const handleChange = (e) => {\n    const val = e.target.value;\n    if (checkedValues[val]) {\n      checkedValues[val] = false;\n      setCheckedValues(checkedValues);\n    }\n    else {\n      checkedValues[val] = true;\n      setCheckedValues([...checkedValues, val]);\n    }\n  };\n  return (<>\n    <h3>App20</h3>\n    <p>現在値：{Object.keys(checkedValues).join(\", \")}</p>\n    {values21.map((elem) =>\n      <App22Item\n        key={elem.id}\n        value={elem.item}\n        checked={checkedValues.includes(elem.item)}\n        onChange={handleChange}\n      />\n    )}\n  </>);\n}\n\n/*=====================================================*/\n// 宣言の都合上最下部にrenderを書いている\nReactDOM.render(\n  <>\n    <h1>Chap.2</h1>\n    <App1 />    <App2 />    <App3 />    <App4 />\n    <App5Par />    <App6 />    <App7 />\n    <h1>Chap.3</h1>\n    <App8 />    <h3>App9</h3>\n    <App9Par name=\"hoge\" />    <App9Par name=\"fuga\" />\n    <h1>Chap.4</h1>\n    <h3>App10</h3>    <App10 />    <App11 />    <App12 />\n    <App13 />   <App14 />    <App15 />    <App16 />\n    <App17 />   <App18 />   <App19 />  <App20 />  <App21 />\n  </>\n  ,\n  document.getElementById('root')\n);"]},"metadata":{},"sourceType":"module"}